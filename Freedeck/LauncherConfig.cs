using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Text;
using System.Text.Json;

namespace Freedeck;

public class LauncherConfig
{
    public static LauncherConfigSchema Configuration = new LauncherConfigSchema
    {
        PersistentSettings = false,
        InstallationDirectory = MainWindow.InstallPath,
        InstallationInformation = new InstallInformation(),
        ShowTerminal = false,
        ShowAutoupdaterWindow = false,
        AutoUpdaterBehavior = 0,
        ConfigurationPath = LauncherConfigSchema.AppData + "\\Launcher.json",
        LastReleaseIndex = LauncherConfigSchema.AppData + "\\CacheMarketplaceManifest.json",
        CurrentInstalledBuild = LauncherConfigSchema.AppData + "\\CurrentBuildID.txt",
        NodePath = "C:\\Program Files\\nodejs\\node.exe",
        NpmPath = "C:\\Program Files\\nodejs\\npm.cmd",
        GitPath  = "C:\\Program Files\\Git\\bin\\git.exe",
        ServerUrl = "http://localhost:5754"
    };
    
    public static void ReloadConfiguration()
    {
        if (!File.Exists(Configuration.ConfigurationPath))
        {
            Update();
        }

        string json = File.ReadAllText(Configuration.ConfigurationPath);
        if (!string.IsNullOrEmpty(json))
        {
            var deserializedConfig = JsonSerializer.Deserialize<LauncherConfigSchema>(json);
            if (deserializedConfig != null)
            {
                string appData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                if (!Directory.Exists(LauncherConfigSchema.AppData)) Directory.CreateDirectory(LauncherConfigSchema.AppData);
                if (File.Exists(appData + "\\FreedeckLauncherConfiguration.json"))
                {
                    File.WriteAllText(Configuration.ConfigurationPath, 
                        File.ReadAllText(appData + "\\FreedeckLauncherConfiguration.json")
                    );
                    File.Delete(appData + "\\FreedeckLauncherConfiguration.json");
                }
                
                MainWindow.InstallPath = Configuration.InstallationDirectory;
                Configuration = deserializedConfig;
                File.WriteAllTextAsync(Configuration.ConfigurationPath, 
                    JsonSerializer.Serialize<LauncherConfigSchema>(Configuration));
            }
        }
    }

    public static void Update()
    {
        if (!Directory.Exists(LauncherConfigSchema.AppData)) Directory.CreateDirectory(LauncherConfigSchema.AppData);
        File.WriteAllText(Configuration.ConfigurationPath, JsonSerializer.Serialize<LauncherConfigSchema>(Configuration));
    }

    public static void UpdateLauncher()
    {
        string prefix =
            "Hey there! This is a file that's used for the App to know what version is installed. Please do not edit this file!\n\nBuild ID: ";
        if (File.Exists(Configuration.CurrentInstalledBuild))
        {
            string buildId = File.ReadAllText(Configuration.CurrentInstalledBuild);
            if (buildId != prefix+MainWindow.BuildId)
            {
                File.WriteAllText(Configuration.CurrentInstalledBuild, prefix+MainWindow.BuildId);
                SetupLogic.CopyLauncherToInstallation();
                Console.WriteLine("Auto-updating launcher...");
            }
        }
        else
        {
            SetupLogic.CopyLauncherToInstallation();
            File.WriteAllText(Configuration.CurrentInstalledBuild, prefix+MainWindow.BuildId);
            Console.WriteLine("First time auto-updating...");
        }
    }
}